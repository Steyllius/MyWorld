using System;
using UnityEngine;

public class EquipmentManager : MonoBehaviour
{
    public static EquipmentManager instance; // Singleton pour un accès global

    private CharacterEquipment characterEquipment;

    // Événement pour notifier les changements d'équipement
    public event Action<string, Item> OnEquipmentChanged;

    private void Awake()
    {
        // Configurer le singleton
        if (instance != null && instance != this)
        {
            Destroy(gameObject);
        }
        else
        {
            instance = this;
        }

        // Initialisation de l'équipement du personnage
        characterEquipment = new CharacterEquipment();
        Debug.Log("EquipmentManager singleton initialisé.");
    }

    public CharacterEquipment GetCharacterEquipment()
    {
        return characterEquipment;
    }

    public void Equip(Item item)
    {
        string slotType = GetSlotTypeForItem(item);

        if (slotType != null)
        {
            characterEquipment.EquipItem(slotType, item);
            OnEquipmentChanged?.Invoke(slotType, item);

            // Supprime l'item de l'inventaire
            Inventory.instance.RemoveItem(item.itemName);

            // Met à jour l'UI de l'inventaire
            Inventory.instance.inventoryUI.UpdateUI();

            Debug.Log($"{item.itemName} équipé dans le slot {slotType}.");
        }
        else
        {
            Debug.LogWarning($"Impossible d'équiper {item.itemName} : aucun slot correspondant.");
        }
    }

    public void Unequip(string slotType)
    {
        Item removedItem = characterEquipment.GetEquippedItem(slotType);

        if (removedItem != null)
        {
            characterEquipment.UnequipItem(slotType);
            OnEquipmentChanged?.Invoke(slotType, null);

            // Ajoute l'item à l'inventaire
            Inventory.instance.AddItem(
                removedItem.itemName,
                removedItem.itemIcon,
                removedItem.quantity,
                removedItem.itemType
            );

            // Met à jour l'UI de l'inventaire
            Inventory.instance.inventoryUI.UpdateUI();

            Debug.Log($"{removedItem.itemName} retiré du slot {slotType} et ajouté à l'inventaire.");
        }
        else
        {
            Debug.LogWarning($"Aucun item à déséquiper dans le slot {slotType}.");
        }
    }

    private string GetSlotTypeForItem(Item item)
    {
        // Détermine le type de slot correspondant à l'item
        switch (item.itemName)
        {
            case "Casque de chevalier":
                return "Casque";
            case "Armure légère":
                return "Torse";
            case "Jambières renforcées":
                return "Jambiere";
            case "Épée longue":
                return "Arme";
            case "Bottes de cuir":
                return "Bottes";
            default:
                return null; // Aucun slot trouvé
        }
    }
}

using UnityEngine;
using UnityEngine.UI;
using TMPro;
using UnityEngine.EventSystems;

public class InventoryUI : MonoBehaviour
{
    // Références principales
    public Inventory inventory; // Référence à l'inventaire
    public GameObject inventoryPanel; // Panel principal de l'inventaire
    public Transform equipmentGrid; // Grid pour les équipements
    public Transform resourcesGrid; // Grid pour les ressources
    public Transform questsGrid; // Grid pour les objets de quête
    public GameObject itemPrefab; // Préfabriqué pour afficher un objet dans l'inventaire

    private void Start()
    {
        // Désactiver le panel de l'inventaire au démarrage
        inventoryPanel.SetActive(false);
    }

    /// <summary>
    /// Met à jour l'UI de l'inventaire pour refléter son contenu actuel.
    /// </summary>
    public void UpdateUI()
    {
        Debug.Log("Mise à jour de l'UI de l'inventaire.");

        // Vider les grilles existantes
        ClearGrid(equipmentGrid);
        ClearGrid(resourcesGrid);
        ClearGrid(questsGrid);

        // Parcourir les items de l'inventaire et les afficher
        foreach (Item item in inventory.items)
        {
            Transform targetGrid = DetermineTargetGrid(item.itemType);
            if (targetGrid != null)
            {
                CreateItemUI(item, targetGrid);
            }
        }
    }

    /// <summary>
    /// Détermine la grille cible en fonction du type d'item.
    /// </summary>
    private Transform DetermineTargetGrid(ItemType itemType)
    {
        return itemType switch
        {
            ItemType.Equipment => equipmentGrid,
            ItemType.Resource => resourcesGrid,
            ItemType.QuestItem => questsGrid,
            _ => null
        };
    }

    /// <summary>
    /// Crée un élément visuel dans l'UI pour un item donné.
    /// </summary>
    private void CreateItemUI(Item item, Transform targetGrid)
    {
        GameObject newItem = Instantiate(itemPrefab, targetGrid);

        // Configure les données de l'item
        ItemData itemData = newItem.GetComponent<ItemData>();
        if (itemData != null)
        {
            itemData.itemName = item.itemName;
            itemData.itemIcon = item.itemIcon;
            itemData.itemType = item.itemType;
            itemData.quantity = item.quantity;
            itemData.validSlot = DetermineValidSlot(item);
        }

        // Configure l'image et le texte
        Image itemImage = newItem.GetComponent<Image>();
        if (itemImage != null) itemImage.sprite = item.itemIcon;

        TextMeshProUGUI itemText = newItem.GetComponentInChildren<TextMeshProUGUI>();
        if (itemText != null) itemText.text = item.quantity > 1 ? item.quantity.ToString() : "";

        // Configure dynamiquement l'événement OnClick pour le bouton
        Button itemButton = newItem.GetComponent<Button>();
        if (itemButton != null)
        {
            // Associe dynamiquement le GameObject à HandleItemClickWrapper
            itemButton.onClick.AddListener(() => HandleItemClickWrapper(newItem));
        }
    }


    /// <summary>
    /// Méthode intermédiaire pour gérer le clic sur un objet sans paramètre complexe.
    /// </summary>
    public void HandleItemClickWrapper(GameObject clickedItem)
    {
        ItemData itemData = clickedItem.GetComponent<ItemData>();
        if (itemData != null)
        {
            Item item = new Item(itemData.itemName, itemData.itemIcon, itemData.itemType, itemData.quantity);
            HandleItemClick(item);
        }
        else
        {
            Debug.LogWarning("Aucun ItemData trouvé sur l'objet cliqué.");
        }
    }

    /// <summary>
    /// Gère le clic sur un item dans l'inventaire.
    /// </summary>
    private void HandleItemClick(Item item)
    {
        Debug.Log($"Item cliqué : {item.itemName}");

        if (item.itemType == ItemType.Equipment)
        {
            // Tente d'équiper l'item via le EquipmentManager
            EquipmentManager.instance.Equip(item);
            inventory.RemoveItem(item.itemName, 1); // Retire l'item de l'inventaire
            Debug.Log($"{item.itemName} équipé via EquipmentManager.");
        }
        else
        {
            Debug.Log("Cet objet ne peut pas être équipé.");
        }
    }

    /// <summary>
    /// Détermine le slot valide pour un item d'équipement.
    /// </summary>
    private string DetermineValidSlot(Item item)
    {
        Debug.Log($"Détermination du slot pour : {item.itemName}");
        return item.itemName switch
        {
            "Casque de chevalier" => "Casque",
            "Sword" => "Arme",
            "Armure légère" => "Torse",
            "Jambières renforcées" => "Jambiere",
            "Bottes de cuir" => "Bottes",
            _ => null // Aucun slot trouvé
        };
    }

    /// <summary>
    /// Supprime tous les objets enfants d'une grille donnée.
    /// </summary>
    private void ClearGrid(Transform grid)
    {
        foreach (Transform child in grid)
        {
            Destroy(child.gameObject);
        }
    }

    private void Update()
    {
        // Vérifie si la touche I est pressée pour ouvrir/fermer l'inventaire
        if (Input.GetKeyDown(KeyCode.I))
        {
            ToggleInventory();
        }
    }

    /// <summary>
    /// Ouvre ou ferme l'inventaire et gère l'état du curseur.
    /// </summary>
    public void ToggleInventory()
    {
        bool isActive = inventoryPanel.activeSelf;
        inventoryPanel.SetActive(!isActive);

        // Activer/désactiver le curseur en fonction de l'état de l'inventaire
        Cursor.lockState = isActive ? CursorLockMode.Locked : CursorLockMode.None;
        Cursor.visible = !isActive;

        Debug.Log(isActive ? "Fermeture de l'inventaire." : "Ouverture de l'inventaire.");
    }
}

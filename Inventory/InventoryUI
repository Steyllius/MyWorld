using UnityEngine;
using UnityEngine.UI;
using TMPro;

public class InventoryUI : MonoBehaviour
{
    public Inventory inventory; // Référence à l'inventaire
    public GameObject inventoryPanel; // Panel principal de l'inventaire
    public Transform equipmentGrid; // Grid pour les équipements
    public Transform resourcesGrid; // Grid pour les ressources
    public Transform questsGrid; // Grid pour les objets de quête
    public GameObject itemPrefab; // Préfabriqué pour afficher un objet

    void Start()
    {
        // Assurez-vous que l'inventaire est désactivé au démarrage si nécessaire
        inventoryPanel.SetActive(false);
    }

    public void UpdateUI()
    {
        Debug.Log("Mise à jour de l'UI de l'inventaire");

        // Vider les grilles existantes
        ClearGrid(equipmentGrid);
        ClearGrid(resourcesGrid);
        ClearGrid(questsGrid);

        // Parcourir les items de l'inventaire
        foreach (Item item in inventory.items)
        {
            Transform targetGrid = null;

            // Déterminer la grille cible en fonction du type d'item
            switch (item.itemType)
            {
                case ItemType.Equipment:
                    targetGrid = equipmentGrid;
                    break;
                case ItemType.Resource:
                    targetGrid = resourcesGrid;
                    break;
                case ItemType.QuestItem:
                    targetGrid = questsGrid;
                    break;
            }

            if (targetGrid != null)
            {
                // Instancier le préfabriqué de l'item dans la grille appropriée
                GameObject newItem = Instantiate(itemPrefab, targetGrid);
                Image itemImage = newItem.GetComponent<Image>();
                TextMeshProUGUI itemText = newItem.GetComponentInChildren<TextMeshProUGUI>();

                // Assigner l'icône et la quantité de l'item
                if (itemImage != null) itemImage.sprite = item.itemIcon;
                if (itemText != null) itemText.text = item.quantity.ToString();

                // Ajouter un événement de clic pour équiper l'item si c'est un équipement
                if (item.itemType == ItemType.Equipment)
                {
                    Button itemButton = newItem.GetComponent<Button>();
                    if (itemButton != null)
                    {
                        itemButton.onClick.AddListener(() => OnInventoryItemClick(item));
                    }
                }
            }
        }
    }

    void OnInventoryItemClick(Item item)
    {
        Debug.Log($"Item cliqué : {item.itemName}");

        if (item.itemType == ItemType.Equipment)
        {
            // Appeler la méthode pour équiper l'item via EquipmentManager
            EquipmentManager.instance.Equip(item);
            Debug.Log($"{item.itemName} équipé via EquipmentManager.");
        }
        else
        {
            Debug.Log("Cet objet ne peut pas être équipé.");
        }
    }
    private void ClearGrid(Transform grid)
    {
        foreach (Transform child in grid)
        {
            Destroy(child.gameObject); // Supprime l'objet de la grille
        }
    }

    void Update()
    {
        if (Input.GetKeyDown(KeyCode.I)) // Vérifie si la touche I est pressée
        {
            ToggleInventory();
        }
    }

    public void ToggleInventory()
    {
        bool isActive = inventoryPanel.activeSelf;
        inventoryPanel.SetActive(!isActive);

        // Active ou désactive le curseur en fonction de l'état de l'inventaire
        Cursor.lockState = isActive ? CursorLockMode.Locked : CursorLockMode.None;
        Cursor.visible = !isActive;
    }
}

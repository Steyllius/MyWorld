using UnityEngine;
using UnityEngine.UI;
using TMPro;

public class InventoryUI : MonoBehaviour
{
    public Inventory inventory; // Référence à l'inventaire
    public GameObject inventoryPanel; // Panel principal de l'inventaire
    public Transform equipmentGrid; // Grid pour les équipements
    public Transform resourcesGrid; // Grid pour les ressources
    public Transform questsGrid; // Grid pour les objets de quête
    public GameObject itemPrefab; // Préfabriqué pour afficher un objet dans l'inventaire

    void Start()
    {
        // Désactiver le panel de l'inventaire au démarrage si nécessaire
        inventoryPanel.SetActive(false);
    }

    public void UpdateUI()
    {
        Debug.Log("Mise à jour de l'UI de l'inventaire");

        // Vider les grilles existantes
        ClearGrid(equipmentGrid);
        ClearGrid(resourcesGrid);
        ClearGrid(questsGrid);

        // Parcourir les items de l'inventaire
        foreach (Item item in inventory.items)
        {
            Transform targetGrid = null;

            // Déterminer la grille cible en fonction du type d'item
            switch (item.itemType)
            {
                case ItemType.Equipment:
                    targetGrid = equipmentGrid;
                    break;
                case ItemType.Resource:
                    targetGrid = resourcesGrid;
                    break;
                case ItemType.QuestItem:
                    targetGrid = questsGrid;
                    break;
            }

            if (targetGrid != null)
            {
                // Instancier le prefab de l'item dans la grille cible
                GameObject newItem = Instantiate(itemPrefab, targetGrid);

                // Configurer le script ItemData avec les données de l'item
                ItemData itemData = newItem.GetComponent<ItemData>();
                if (itemData != null)
                {
                    itemData.itemName = item.itemName;
                    itemData.itemIcon = item.itemIcon;
                    itemData.itemType = item.itemType;
                    itemData.quantity = item.quantity;

                    // Si c'est un équipement, définir le slot valide
                    if (item.itemType == ItemType.Equipment)
                    {
                        itemData.validSlot = "Arme"; // Ou autre type selon la configuration
                    }
                }

                // Configurer l'affichage visuel (image et texte)
                Image itemImage = newItem.GetComponent<Image>();
                if (itemImage != null)
                {
                    itemImage.sprite = item.itemIcon;
                }

                TextMeshProUGUI itemText = newItem.GetComponentInChildren<TextMeshProUGUI>();
                if (itemText != null)
                {
                    itemText.text = item.quantity.ToString();
                }

                // Ajouter un événement de clic pour interagir avec l'item
                Button itemButton = newItem.GetComponent<Button>();
                if (itemButton != null)
                {
                    itemButton.onClick.AddListener(() => OnInventoryItemClick(item));
                }
            }
        }
    }

    void OnInventoryItemClick(Item item)
    {
        Debug.Log($"Item cliqué : {item.itemName}");

        if (item.itemType == ItemType.Equipment)
        {
            // Appeler la méthode pour équiper l'item via EquipmentManager
            EquipmentManager.instance.Equip(item);
            Debug.Log($"{item.itemName} équipé via EquipmentManager.");
        }
        else
        {
            Debug.Log("Cet objet ne peut pas être équipé.");
        }
    }

    private void ClearGrid(Transform grid)
    {
        // Supprimer tous les objets enfants de la grille
        foreach (Transform child in grid)
        {
            Destroy(child.gameObject);
        }
    }

    void Update()
    {
        if (Input.GetKeyDown(KeyCode.I)) // Ouvrir/fermer l'inventaire avec la touche I
        {
            ToggleInventory();
        }
    }

    public void ToggleInventory()
    {
        bool isActive = inventoryPanel.activeSelf;
        inventoryPanel.SetActive(!isActive);

        // Activer/désactiver le curseur selon l'état de l'inventaire
        Cursor.lockState = isActive ? CursorLockMode.Locked : CursorLockMode.None;
        Cursor.visible = !isActive;
    }
}
